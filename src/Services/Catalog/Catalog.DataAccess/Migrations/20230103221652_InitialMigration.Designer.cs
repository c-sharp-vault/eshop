// <auto-generated />
using System;
using Catalog.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Catalog.DataAccess.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20230103221652_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Catalog.Core.Models.CatalogBrand", b =>
                {
                    b.Property<int>("CatalogBrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CatalogBrandID"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("date");

                    b.HasKey("CatalogBrandID");

                    b.ToTable("CatalogBrands", "Catalog");

                    b.HasData(
                        new
                        {
                            CatalogBrandID = 1,
                            Brand = "N/A",
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 717, DateTimeKind.Local).AddTicks(1545),
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 717, DateTimeKind.Local).AddTicks(2234)
                        },
                        new
                        {
                            CatalogBrandID = 2,
                            Brand = "Coca-Cola",
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 717, DateTimeKind.Local).AddTicks(2915),
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 717, DateTimeKind.Local).AddTicks(3543)
                        },
                        new
                        {
                            CatalogBrandID = 3,
                            Brand = "Terrabusi",
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 717, DateTimeKind.Local).AddTicks(4182),
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 717, DateTimeKind.Local).AddTicks(4810)
                        },
                        new
                        {
                            CatalogBrandID = 4,
                            Brand = "Marlboro",
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 717, DateTimeKind.Local).AddTicks(5441),
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 717, DateTimeKind.Local).AddTicks(6057)
                        },
                        new
                        {
                            CatalogBrandID = 5,
                            Brand = "Quilmes",
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 717, DateTimeKind.Local).AddTicks(6688),
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 717, DateTimeKind.Local).AddTicks(7314)
                        });
                });

            modelBuilder.Entity("Catalog.Core.Models.CatalogItem", b =>
                {
                    b.Property<int>("CatalogItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CatalogItemID"));

                    b.Property<int>("AvailableStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("CatalogBrandID")
                        .HasColumnType("integer");

                    b.Property<int>("CatalogTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("MaxStockThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("OnReorder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("PictureFileName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("placeholder.png");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("RestockThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("date");

                    b.HasKey("CatalogItemID");

                    b.HasIndex("CatalogBrandID");

                    b.HasIndex("CatalogTypeID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CatalogItems", "Catalog");

                    b.HasData(
                        new
                        {
                            CatalogItemID = 1,
                            AvailableStock = 0,
                            CatalogBrandID = 2,
                            CatalogTypeID = 2,
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 718, DateTimeKind.Local).AddTicks(3069),
                            Description = "",
                            MaxStockThreshold = 1,
                            Name = "Sin Azúcar 1.5l",
                            OnReorder = false,
                            PictureFileName = "placeholder.png",
                            Price = 0m,
                            RestockThreshold = 0,
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 718, DateTimeKind.Local).AddTicks(3715)
                        },
                        new
                        {
                            CatalogItemID = 2,
                            AvailableStock = 0,
                            CatalogBrandID = 5,
                            CatalogTypeID = 5,
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 718, DateTimeKind.Local).AddTicks(4368),
                            Description = "",
                            MaxStockThreshold = 1,
                            Name = "Clásica 500ml",
                            OnReorder = false,
                            PictureFileName = "placeholder.png",
                            Price = 0m,
                            RestockThreshold = 0,
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 718, DateTimeKind.Local).AddTicks(4983)
                        },
                        new
                        {
                            CatalogItemID = 3,
                            AvailableStock = 0,
                            CatalogBrandID = 3,
                            CatalogTypeID = 4,
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 718, DateTimeKind.Local).AddTicks(5623),
                            Description = "",
                            MaxStockThreshold = 1,
                            Name = "Tita",
                            OnReorder = false,
                            PictureFileName = "placeholder.png",
                            Price = 0m,
                            RestockThreshold = 0,
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 718, DateTimeKind.Local).AddTicks(6246)
                        },
                        new
                        {
                            CatalogItemID = 4,
                            AvailableStock = 0,
                            CatalogBrandID = 4,
                            CatalogTypeID = 3,
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 718, DateTimeKind.Local).AddTicks(6870),
                            Description = "",
                            MaxStockThreshold = 1,
                            Name = "Ice Blast 8",
                            OnReorder = false,
                            PictureFileName = "placeholder.png",
                            Price = 0m,
                            RestockThreshold = 0,
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 718, DateTimeKind.Local).AddTicks(7488)
                        });
                });

            modelBuilder.Entity("Catalog.Core.Models.CatalogType", b =>
                {
                    b.Property<int>("CatalogTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CatalogTypeID"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("date");

                    b.HasKey("CatalogTypeID");

                    b.ToTable("CatalogTypes", "Catalog");

                    b.HasData(
                        new
                        {
                            CatalogTypeID = 1,
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 718, DateTimeKind.Local).AddTicks(9477),
                            Type = "N/A",
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 719, DateTimeKind.Local).AddTicks(117)
                        },
                        new
                        {
                            CatalogTypeID = 2,
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 719, DateTimeKind.Local).AddTicks(752),
                            Type = "Gaseosas",
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 719, DateTimeKind.Local).AddTicks(1381)
                        },
                        new
                        {
                            CatalogTypeID = 3,
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 719, DateTimeKind.Local).AddTicks(2016),
                            Type = "Cigarrillos",
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 719, DateTimeKind.Local).AddTicks(2643)
                        },
                        new
                        {
                            CatalogTypeID = 4,
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 719, DateTimeKind.Local).AddTicks(3275),
                            Type = "Alfajores & Obleas",
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 719, DateTimeKind.Local).AddTicks(3903)
                        },
                        new
                        {
                            CatalogTypeID = 5,
                            CreatedBy = "Fedex",
                            CreatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 719, DateTimeKind.Local).AddTicks(4540),
                            Type = "Cervezas",
                            UpdatedBy = "Fedex",
                            UpdatedOn = new DateTime(2023, 1, 3, 19, 16, 52, 719, DateTimeKind.Local).AddTicks(5159)
                        });
                });

            modelBuilder.Entity("Catalog.Core.Models.CatalogItem", b =>
                {
                    b.HasOne("Catalog.Core.Models.CatalogBrand", "CatalogBrand")
                        .WithMany("CatalogItems")
                        .HasForeignKey("CatalogBrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.Core.Models.CatalogType", "CatalogType")
                        .WithMany("CatalogItems")
                        .HasForeignKey("CatalogTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogBrand");

                    b.Navigation("CatalogType");
                });

            modelBuilder.Entity("Catalog.Core.Models.CatalogBrand", b =>
                {
                    b.Navigation("CatalogItems");
                });

            modelBuilder.Entity("Catalog.Core.Models.CatalogType", b =>
                {
                    b.Navigation("CatalogItems");
                });
#pragma warning restore 612, 618
        }
    }
}
